name: Java CICD

on: [push]

jobs:
  build_linux:
    runs-on: ubuntu-latest
    container:
      image: debian:8

    steps:

      - name: Install dependencies (g++, openjdk, maven, git)
        run: |
          apt-get update
          apt-get install build-essential openjdk-7-jre openjdk-7-jdk maven git -y
      - name: Checkout repository and submodules and build
        shell: bash
        run: |
          git clone $GITHUB_SERVER_URL/$GITHUB_REPOSITORY
          export GITHUB_REPOSITORY_NAME=$(echo $GITHUB_REPOSITORY  | awk '{split($0,a,"/"); print a[2]}')
          cd $GITHUB_REPOSITORY_NAME
          if [[ $GITHUB_REF_TYPE -eq branch ]]; then
            git checkout $GITHUB_REF_NAME
          else
            git checkout tags/$GITHUB_REF_NAME -b $GITHUB_REF_NAME-branch
          fi
          
          git submodule update --init --recursive
          mvn --batch-mode --update-snapshots package
          PROJECT_VERSION=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
          mkdir /staging
          cp target/jfasttext-$PROJECT_VERSION.jar /staging/jfasttext-linux.jar
          cp target/jfasttext-$PROJECT_VERSION-javadoc.jar /staging/jfasttext-linux-javadoc.jar
          cp target/jfasttext-$PROJECT_VERSION-sources.jar /staging/jfasttext-linux-sources.jar
      - uses: actions/upload-artifact@v3
        with:
          name: Package Linux
          path: /staging
  
  build_windows:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3
      - name: Checkout submodules
        run: git submodule update --init --recursive
      - uses: ilammy/msvc-dev-cmd@v1
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Build with Maven Windows
        run: mvn --batch-mode --update-snapshots package 
      - shell: pwsh
        run: |
          $projectversion=mvn help:evaluate "-Dexpression=project.version" -q -DforceStdout | Out-String
          $projectversion=$projectversion.trim()
          New-Item -Path . -Name "staging" -ItemType "directory"
          Copy-Item ".\target\jfasttext-$projectversion.jar" -Destination ".\staging\jfasttext-windows.jar"
          Copy-Item ".\target\jfasttext-$projectversion-javadoc.jar" -Destination ".\staging\jfasttext-windows-javadoc.jar"
          Copy-Item ".\target\jfasttext-$projectversion-sources.jar" -Destination ".\staging\jfasttext-windows-sources.jar"
      - uses: actions/upload-artifact@v3
        with:
          name: Package Windows
          path: staging

  build_macosx:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v3
      - name: Checkout submodules
        run: git submodule update --init --recursive
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'
      
      - name: Build with Maven MacOS
        run: mvn --batch-mode --update-snapshots package
      - run: |
          PROJECT_VERSION=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
          mkdir staging
          cp target/jfasttext-$PROJECT_VERSION.jar staging/jfasttext-macosx.jar
          cp target/jfasttext-$PROJECT_VERSION-javadoc.jar staging/jfasttext-macosx-javadoc.jar
          cp target/jfasttext-$PROJECT_VERSION-sources.jar staging/jfasttext-macosx-sources.jar
      - uses: actions/upload-artifact@v3
        with:
          name: Package MacOSX
          path: staging

  merge_build:
    runs-on: ubuntu-latest
    needs: [build_linux, build_windows, build_macosx]

    steps:
      - name: Download JAR Linux
        uses: actions/download-artifact@v3
        with:
          name: Package Linux
          path: ~/download
      - name: Download JAR Windows
        uses: actions/download-artifact@v3
        with:
          name: Package Windows
          path: ~/download
      - name: Download JAR MacOSX
        uses: actions/download-artifact@v3
        with:
          name: Package MacOSX
          path: ~/download
      - name: Checkout project
        uses: actions/checkout@v3
      - name: Copy pom
        run:
          cp pom.xml ~/download/pom.xml
      - name: Build merged jar
        shell: bash
        run: |
          cd ~/download
          mkdir output
          PROJECT_VERSION=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
          echo ${PROJECT_VERSION}

          mkdir work
          unzip -o jfasttext-windows.jar -d work
          unzip -o jfasttext-macosx.jar -d work
          unzip -o jfasttext-linux.jar -d work
          cd work
          zip -r jfasttext-${PROJECT_VERSION}-SNAPSHOT.jar .
          mv jfasttext-${PROJECT_VERSION}-SNAPSHOT.jar ../output/jfasttext-${PROJECT_VERSION}-SNAPSHOT.jar
          cd ..
          rm -rf work

          mkdir work
          unzip -o jfasttext-windows-javadoc.jar -d work
          unzip -o jfasttext-macosx-javadoc.jar -d work
          unzip -o jfasttext-linux-javadoc.jar -d work
          cd work
          zip -r jfasttext-${PROJECT_VERSION}-javadoc.jar .
          mv jfasttext-${PROJECT_VERSION}-javadoc.jar ../output/jfasttext-${PROJECT_VERSION}-javadoc.jar
          cd ..
          rm -rf work

          mkdir work
          unzip -o jfasttext-windows-sources.jar -d work
          unzip -o jfasttext-macosx-sources.jar -d work
          unzip -o jfasttext-linux-sources.jar -d work
          cd work
          zip -r jfasttext-${PROJECT_VERSION}-sources.jar .
          mv jfasttext-${PROJECT_VERSION}-sources.jar ../output/jfasttext-${PROJECT_VERSION}-sources.jar
          cd ..
          rm -rf work
        
      - uses: actions/upload-artifact@v3
        with:
          name: Package multi-platform
          path: ~/download/output/*.jar
    
  deploy_snapshot:
    runs-on: ubuntu-latest
    needs: [merge_build]
    steps:
      - name: Download JAR Linux
        uses: actions/download-artifact@v3
        with:
          name: Package multi-platform
          path: ~/download
      - name: Set up Maven Central Repository
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }} 
          gpg-passphrase: GPG_PASSPHRASE 
      - name: Checkout project
        uses: actions/checkout@v3
      - name: Copy pom
        run:
          cp pom.xml ~/download/pom.xml
      - name: Publish package
        shell: bash
        run: |
          cd ~/download
          PROJECT_VERSION=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
          mvn --batch-mode release:update-versions -DdevelopmentVersion=${PROJECT_VERSION}-SNAPSHOT
          mvn gpg:sign-and-deploy-file -Durl=https://s01.oss.sonatype.org/content/repositories/snapshots/ -DrepositoryId=ossrh -DpomFile=pom.xml -Dfile=jfasttext-${PROJECT_VERSION}-SNAPSHOT.jar -Djavadoc=jfasttext-${PROJECT_VERSION}-javadoc.jar -Dsources=jfasttext-${PROJECT_VERSION}-sources.jar
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
  
  deploy_release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [merge_build]
    steps:
      - name: Download JAR Linux
        uses: actions/download-artifact@v3
        with:
          name: Package multi-platform
          path: ~/download
      - name: Set up Maven Central Repository
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }} 
          gpg-passphrase: GPG_PASSPHRASE 
      - name: Checkout project
        uses: actions/checkout@v3
      - name: Copy pom
        run:
          cp pom.xml ~/download/pom.xml
      - name: Publish package
        shell: bash
        run: |
          cd ~/download
          PROJECT_VERSION=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
          cp jfasttext-${PROJECT_VERSION}-SNAPSHOT.jar jfasttext-${PROJECT_VERSION}.jar
          mvn gpg:sign-and-deploy-file -Durl=https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/ -DrepositoryId=ossrh -DpomFile=pom.xml -DrepositoryId=ossrh -DpomFile=pom.xml -Dfile=jfasttext-${PROJECT_VERSION}.jar -Djavadoc=jfasttext-${PROJECT_VERSION}-javadoc.jar -Dsources=jfasttext-${PROJECT_VERSION}-sources.jar
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

  